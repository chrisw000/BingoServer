<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="1" xml:space="preserve">
    <value>Kelly’s eye</value>
  </data>
  <data name="10" xml:space="preserve">
    <value>McCluckys’s den</value>
  </data>
  <data name="11" xml:space="preserve">
    <value>Legs eleven</value>
  </data>
  <data name="12" xml:space="preserve">
    <value>One dozen</value>
  </data>
  <data name="13" xml:space="preserve">
    <value>Unlucky for some</value>
  </data>
  <data name="14" xml:space="preserve">
    <value>Valentine’s Day</value>
  </data>
  <data name="15" xml:space="preserve">
    <value>Young and keen</value>
  </data>
  <data name="16" xml:space="preserve">
    <value>Sweet 16 and never been kissed</value>
  </data>
  <data name="17" xml:space="preserve">
    <value>Dancing queen</value>
  </data>
  <data name="18" xml:space="preserve">
    <value>Coming of age</value>
  </data>
  <data name="19" xml:space="preserve">
    <value>Goodbye teens</value>
  </data>
  <data name="2" xml:space="preserve">
    <value>One little duck</value>
  </data>
  <data name="20" xml:space="preserve">
    <value>One score</value>
  </data>
  <data name="21" xml:space="preserve">
    <value>Royal salute/Key of the door</value>
  </data>
  <data name="22" xml:space="preserve">
    <value>Two little ducks</value>
  </data>
  <data name="23" xml:space="preserve">
    <value>Thee and me</value>
  </data>
  <data name="24" xml:space="preserve">
    <value>Two dozen</value>
  </data>
  <data name="25" xml:space="preserve">
    <value>Duck and dive</value>
  </data>
  <data name="26" xml:space="preserve">
    <value>Pick and mix</value>
  </data>
  <data name="27" xml:space="preserve">
    <value>Gateway to heaven</value>
  </data>
  <data name="28" xml:space="preserve">
    <value>In a state/Over weight</value>
  </data>
  <data name="29" xml:space="preserve">
    <value>Rise and shine</value>
  </data>
  <data name="3" xml:space="preserve">
    <value>Cup of tea</value>
  </data>
  <data name="30" xml:space="preserve">
    <value>Dirty Gertie</value>
  </data>
  <data name="31" xml:space="preserve">
    <value>Get up and run</value>
  </data>
  <data name="32" xml:space="preserve">
    <value>Buckle my shoe</value>
  </data>
  <data name="33" xml:space="preserve">
    <value>Dirty knee/All the threes/Fish, chips &amp; peas</value>
  </data>
  <data name="34" xml:space="preserve">
    <value>Ask for more</value>
  </data>
  <data name="35" xml:space="preserve">
    <value>Jump and jive</value>
  </data>
  <data name="36" xml:space="preserve">
    <value>Three dozen</value>
  </data>
  <data name="37" xml:space="preserve">
    <value>More than eleven</value>
  </data>
  <data name="38" xml:space="preserve">
    <value>Christmas cake</value>
  </data>
  <data name="39" xml:space="preserve">
    <value>39 steps</value>
  </data>
  <data name="4" xml:space="preserve">
    <value>Knock at the door</value>
  </data>
  <data name="40" xml:space="preserve">
    <value>Life begins</value>
  </data>
  <data name="41" xml:space="preserve">
    <value>Time for fun</value>
  </data>
  <data name="42" xml:space="preserve">
    <value>Winnie the Pooh</value>
  </data>
  <data name="43" xml:space="preserve">
    <value>Down on your knees</value>
  </data>
  <data name="44" xml:space="preserve">
    <value>Droopy drawers</value>
  </data>
  <data name="45" xml:space="preserve">
    <value>Halfway there</value>
  </data>
  <data name="46" xml:space="preserve">
    <value>Up to tricks</value>
  </data>
  <data name="47" xml:space="preserve">
    <value>Four and seven</value>
  </data>
  <data name="48" xml:space="preserve">
    <value>Four dozen</value>
  </data>
  <data name="49" xml:space="preserve">
    <value>PC</value>
  </data>
  <data name="5" xml:space="preserve">
    <value>Man alive</value>
  </data>
  <data name="50" xml:space="preserve">
    <value>Half a century</value>
  </data>
  <data name="51" xml:space="preserve">
    <value>Tweak of the thumb</value>
  </data>
  <data name="52" xml:space="preserve">
    <value>Danny La Rue</value>
  </data>
  <data name="53" xml:space="preserve">
    <value>Here comes Herbie/Stuck in a tree</value>
  </data>
  <data name="54" xml:space="preserve">
    <value>Clean the floor</value>
  </data>
  <data name="55" xml:space="preserve">
    <value>Snakes alive</value>
  </data>
  <data name="56" xml:space="preserve">
    <value>Shotts Bus</value>
  </data>
  <data name="57" xml:space="preserve">
    <value>Heinz varieties</value>
  </data>
  <data name="58" xml:space="preserve">
    <value>Make them wait</value>
  </data>
  <data name="59" xml:space="preserve">
    <value>Brighton Line</value>
  </data>
  <data name="6" xml:space="preserve">
    <value>Tom Mix/Half a dozen</value>
  </data>
  <data name="60" xml:space="preserve">
    <value>Five dozen</value>
  </data>
  <data name="61" xml:space="preserve">
    <value>Baker’s bun</value>
  </data>
  <data name="62" xml:space="preserve">
    <value>Turn the screw/Tickety-boo</value>
  </data>
  <data name="63" xml:space="preserve">
    <value>Tickle me 63</value>
  </data>
  <data name="64" xml:space="preserve">
    <value>Red raw</value>
  </data>
  <data name="65" xml:space="preserve">
    <value>Old age pension</value>
  </data>
  <data name="66" xml:space="preserve">
    <value>Clickety click</value>
  </data>
  <data name="67" xml:space="preserve">
    <value>Stairway to heaven</value>
  </data>
  <data name="68" xml:space="preserve">
    <value>Saving Grace</value>
  </data>
  <data name="69" xml:space="preserve">
    <value>Favourite of mine</value>
  </data>
  <data name="7" xml:space="preserve">
    <value>Lucky seven</value>
  </data>
  <data name="70" xml:space="preserve">
    <value>Three score and ten</value>
  </data>
  <data name="71" xml:space="preserve">
    <value>Bang on the drum</value>
  </data>
  <data name="72" xml:space="preserve">
    <value>Six dozen</value>
  </data>
  <data name="73" xml:space="preserve">
    <value>Queen bee</value>
  </data>
  <data name="74" xml:space="preserve">
    <value>Hit the floor</value>
  </data>
  <data name="75" xml:space="preserve">
    <value>Strive and strive</value>
  </data>
  <data name="76" xml:space="preserve">
    <value>Trombones</value>
  </data>
  <data name="77" xml:space="preserve">
    <value>Sunset strip</value>
  </data>
  <data name="78" xml:space="preserve">
    <value>39 more steps</value>
  </data>
  <data name="79" xml:space="preserve">
    <value>One more time</value>
  </data>
  <data name="8" xml:space="preserve">
    <value>Garden gate</value>
  </data>
  <data name="80" xml:space="preserve">
    <value>Eight and blank</value>
  </data>
  <data name="81" xml:space="preserve">
    <value>Stop and run</value>
  </data>
  <data name="82" xml:space="preserve">
    <value>Straight on through</value>
  </data>
  <data name="83" xml:space="preserve">
    <value>Time for tea</value>
  </data>
  <data name="84" xml:space="preserve">
    <value>Seven dozen</value>
  </data>
  <data name="85" xml:space="preserve">
    <value>Staying alive</value>
  </data>
  <data name="86" xml:space="preserve">
    <value>Between the sticks</value>
  </data>
  <data name="87" xml:space="preserve">
    <value>Torquay in Devon</value>
  </data>
  <data name="88" xml:space="preserve">
    <value>Two fat ladies</value>
  </data>
  <data name="89" xml:space="preserve">
    <value>Nearly there</value>
  </data>
  <data name="9" xml:space="preserve">
    <value>Doctor’s orders</value>
  </data>
  <data name="90" xml:space="preserve">
    <value>Top of the shop</value>
  </data>
</root>